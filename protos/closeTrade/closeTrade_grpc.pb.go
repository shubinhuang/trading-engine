// protoc --go_out=. --go_opt=paths=source_relative  --go-grpc_out=. --go-grpc_opt=paths=source_relative ./closeTrade.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: closeTrade.proto

package closeTrade

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CloseService_CloseTrade_FullMethodName = "/closeTrade.CloseService/CloseTrade"
)

// CloseServiceClient is the client API for CloseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CloseServiceClient interface {
	// 包含一个关闭指定标的撮合的方法
	CloseTrade(ctx context.Context, in *CloseRequest, opts ...grpc.CallOption) (*CloseReply, error)
}

type closeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCloseServiceClient(cc grpc.ClientConnInterface) CloseServiceClient {
	return &closeServiceClient{cc}
}

func (c *closeServiceClient) CloseTrade(ctx context.Context, in *CloseRequest, opts ...grpc.CallOption) (*CloseReply, error) {
	out := new(CloseReply)
	err := c.cc.Invoke(ctx, CloseService_CloseTrade_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CloseServiceServer is the server API for CloseService service.
// All implementations must embed UnimplementedCloseServiceServer
// for forward compatibility
type CloseServiceServer interface {
	// 包含一个关闭指定标的撮合的方法
	CloseTrade(context.Context, *CloseRequest) (*CloseReply, error)
	mustEmbedUnimplementedCloseServiceServer()
}

// UnimplementedCloseServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCloseServiceServer struct {
}

func (UnimplementedCloseServiceServer) CloseTrade(context.Context, *CloseRequest) (*CloseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseTrade not implemented")
}
func (UnimplementedCloseServiceServer) mustEmbedUnimplementedCloseServiceServer() {}

// UnsafeCloseServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CloseServiceServer will
// result in compilation errors.
type UnsafeCloseServiceServer interface {
	mustEmbedUnimplementedCloseServiceServer()
}

func RegisterCloseServiceServer(s grpc.ServiceRegistrar, srv CloseServiceServer) {
	s.RegisterService(&CloseService_ServiceDesc, srv)
}

func _CloseService_CloseTrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloseServiceServer).CloseTrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloseService_CloseTrade_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloseServiceServer).CloseTrade(ctx, req.(*CloseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CloseService_ServiceDesc is the grpc.ServiceDesc for CloseService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CloseService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "closeTrade.CloseService",
	HandlerType: (*CloseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CloseTrade",
			Handler:    _CloseService_CloseTrade_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "closeTrade.proto",
}
