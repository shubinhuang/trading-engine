// protoc --go_out=. --go_opt=paths=source_relative  --go-grpc_out=. --go-grpc_opt=paths=source_relative ./openTrade.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: openTrade.proto

package openTrade

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	OpenService_OpenTrade_FullMethodName = "/openTrade.OpenService/OpenTrade"
)

// OpenServiceClient is the client API for OpenService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OpenServiceClient interface {
	// 包含一个开启指定标的撮合的方法
	OpenTrade(ctx context.Context, in *OpenRequest, opts ...grpc.CallOption) (*OpenReply, error)
}

type openServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOpenServiceClient(cc grpc.ClientConnInterface) OpenServiceClient {
	return &openServiceClient{cc}
}

func (c *openServiceClient) OpenTrade(ctx context.Context, in *OpenRequest, opts ...grpc.CallOption) (*OpenReply, error) {
	out := new(OpenReply)
	err := c.cc.Invoke(ctx, OpenService_OpenTrade_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OpenServiceServer is the server API for OpenService service.
// All implementations must embed UnimplementedOpenServiceServer
// for forward compatibility
type OpenServiceServer interface {
	// 包含一个开启指定标的撮合的方法
	OpenTrade(context.Context, *OpenRequest) (*OpenReply, error)
	mustEmbedUnimplementedOpenServiceServer()
}

// UnimplementedOpenServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOpenServiceServer struct {
}

func (UnimplementedOpenServiceServer) OpenTrade(context.Context, *OpenRequest) (*OpenReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenTrade not implemented")
}
func (UnimplementedOpenServiceServer) mustEmbedUnimplementedOpenServiceServer() {}

// UnsafeOpenServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OpenServiceServer will
// result in compilation errors.
type UnsafeOpenServiceServer interface {
	mustEmbedUnimplementedOpenServiceServer()
}

func RegisterOpenServiceServer(s grpc.ServiceRegistrar, srv OpenServiceServer) {
	s.RegisterService(&OpenService_ServiceDesc, srv)
}

func _OpenService_OpenTrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenServiceServer).OpenTrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OpenService_OpenTrade_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenServiceServer).OpenTrade(ctx, req.(*OpenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OpenService_ServiceDesc is the grpc.ServiceDesc for OpenService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OpenService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "openTrade.OpenService",
	HandlerType: (*OpenServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OpenTrade",
			Handler:    _OpenService_OpenTrade_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "openTrade.proto",
}
